import React, { useRef, useMemo, useEffect, useState } from "react";
import { Canvas, useFrame } from "@react-three/fiber";
import { Stars, OrbitControls } from "@react-three/drei";
import * as THREE from "three";

/*****************************************************************************************
 * SpinningGlobeApp.jsx – now with white‑dot continents!
 * ---------------------------------------------------------------------------------------
 * HOW IT WORKS
 * 1. A wireframe sphere still spins in the background (purely aesthetic grid).
 * 2. `LandDots` loads a pre‑baked JSON file (≈8 000 lat/lon pairs on land) and instances
 *    tiny white spheres at those coordinates → dotted continental outline.
 * 3. Your *content* points (posts, offices, etc.) are rendered on top via <Globe />.
 *
 * QUICK START
 *   ▸ Put `landDots.json` into your `/public` folder (see `scripts/makeLandDots.js` below).
 *   ▸ npm i three @react-three/fiber @react-three/drei
 *   ▸ Import <App /> in your root.
 *
 * Want a different density? Run the generator with another STEP value.
 *****************************************************************************************/

/***************************
 * Helper – lat/lon → Vector3
 ***************************/
function latLonToVector3(lat, lon, radius = 1.02) {
  const phi = (90 - lat) * (Math.PI / 180);
  const theta = (lon + 180) * (Math.PI / 180);
  return new THREE.Vector3(
    -radius * Math.sin(phi) * Math.cos(theta),
    radius * Math.cos(phi),
    radius * Math.sin(phi) * Math.sin(theta)
  );
}

/***************************
 * Globe (wireframe + CMS dots)
 ***************************/
function Globe({ points }) {
  const globeRef = useRef();
  useFrame(({ clock }) => {
    if (globeRef.current) globeRef.current.rotation.y = clock.getElapsedTime() * 0.1;
  });

  const geometry = useMemo(() => new THREE.SphereGeometry(1, 64, 64), []);
  const wireMat = useMemo(
    () => new THREE.MeshBasicMaterial({ color: "white", wireframe: true, opacity: 0.15, transparent: true }),
    []
  );

  return (
    <>
      {/* Wireframe sphere */}
      <mesh geometry={geometry} material={wireMat} ref={globeRef} />

      {/* Dynamic content points */}
      {points.map((p) => (
        <mesh key={p.id ?? `${p.lat}-${p.lon}`} position={latLonToVector3(p.lat, p.lon)}>
          <sphereGeometry args={[0.02, 8, 8]} />
          <meshBasicMaterial color="white" />
        </mesh>
      ))}
    </>
  );
}

/***************************
 * LandDots – instanced white spheres forming continents
 ***************************/
function LandDots({ url = "/landDots.json", radius = 1.02 }) {
  const [coords, setCoords] = useState([]);

  // Load lat/lon pairs once
  useEffect(() => {
    fetch(url)
      .then((r) => r.json())
      .then(setCoords)
      .catch((err) => console.error("❌ Could not load landDots:", err));
  }, [url]);

  const meshRef = useRef();
  const obj = useMemo(() => new THREE.Object3D(), []);

  // Push each coordinate into the instanced mesh matrix
  useEffect(() => {
    if (!meshRef.current || coords.length === 0) return;
    coords.forEach(([lat, lon], i) => {
      const v = latLonToVector3(lat, lon, radius);
      obj.position.copy(v);
      obj.updateMatrix();
      meshRef.current.setMatrixAt(i, obj.matrix);
    });
    meshRef.current.instanceMatrix.needsUpdate = true;
  }, [coords, radius, obj]);

  if (coords.length === 0) return null;

  return (
    <instancedMesh ref={meshRef} args={[null, null, coords.length]} frustumCulled={false}>
      <sphereGeometry args={[0.012, 6, 6]} />
      <meshBasicMaterial color="white" depthWrite={false} />
    </instancedMesh>
  );
}

/***************************
 * Main application entry
 ***************************/
export default function App() {
  // Example user content – replace with real‑time CMS feed
  const points = [
    { lat: 52.3676, lon: 4.9041, id: "amsterdam" },
    { lat: 37.7749, lon: -122.4194, id: "sanfran" },
    { lat: -33.8688, lon: 151.2093, id: "sydney" },
  ];

  return (
    <div className="w-screen h-screen bg-black">
      <Canvas camera={{ position: [0, 0, 3] }}>
        <Stars radius={100} depth={50} count={5000} factor={4} fade />
        <ambientLight intensity={0.8} />

        {/* Dotted continents */}
        <LandDots />

        {/* Wireframe grid & your content */}
        <Globe points={points} />

        <OrbitControls enableZoom={false} />
      </Canvas>
    </div>
  );
}

/*****************************************************************************************
 * Optional one‑off generator – scripts/makeLandDots.js
 * -------------------------------------------------------------------------
 * Run this to create /public/landDots.json
 * Requires: npm i --save-dev d3-geo topojson-client
 *****************************************************************************************/
/*
import fs from "fs";
import { feature } from "topojson-client";
import * as d3 from "d3-geo";

const world = JSON.parse(fs.readFileSync("./data/world-110m.json"));
const land = feature(world, world.objects.land);
const step = 2; // degrees – increase for fewer dots
const dots = [];
for (let lat = -90; lat <= 90; lat += step) {
  for (let lon = -180; lon <= 180; lon += step) {
    if (d3.geoContains(land, [lon, lat])) dots.push([lat, lon]);
  }
}
fs.writeFileSync("./public/landDots.json", JSON.stringify(dots));
console.log("Wrote", dots.length, "land dots");
*/
