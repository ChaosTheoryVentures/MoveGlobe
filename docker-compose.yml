version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: moveglobe:latest
    container_name: moveglobe-app
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - SESSION_SECRET=${SESSION_SECRET:-moveglobe-secret-change-in-production}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - PORT=5000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - moveglobe-network
    volumes:
      # Optional: Mount for persisting uploaded files
      - moveglobe-uploads:/app/attached_assets
    depends_on:
      - postgres

  postgres:
    image: postgres:16-alpine
    container_name: moveglobe-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-moveglobe}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-moveglobe-password}
      - POSTGRES_DB=${POSTGRES_DB:-moveglobe}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-moveglobe}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - moveglobe-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: moveglobe-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - moveglobe-network
    profiles:
      - production

  # Optional: Redis for session storage (if needed in future)
  redis:
    image: redis:7-alpine
    container_name: moveglobe-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - moveglobe-network
    profiles:
      - with-redis

  # Development database admin tool
  adminer:
    image: adminer:latest
    container_name: moveglobe-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - moveglobe-network
    profiles:
      - development

networks:
  moveglobe-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  moveglobe-uploads:
    driver: local
  nginx-cache:
    driver: local